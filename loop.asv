close all
brain = imread('brain.jpg');
imdata = im2double(brain(:,:,1)); %black and white image, all layers same, conv to double [0 1]
size_dif = size(imdata,1)-size(imdata,2);
imdata = [zeros(size(imdata,1), size_dif/2) imdata zeros(size(imdata,1), size_dif/2)]; %evenly pad zeros to square image
rows = size(imdata,1);
cols = size(imdata,2);

ft_weight = 1/(norm(imdata,"fro"));

F_imdata = fftshift(fft2(imdata)*ft_weight);

m= 2;
mask = make_mask(rows,m);
F_imdata_sp = F_imdata.*mask;
im_sp = ifft2(ifftshift(F_imdata_sp))/ft_weight;
im_sp = im_sp./(abs(max(im_sp,[],'all')));
im_og = im_sp;

im_final = zeros(rows,cols);

%Loop here
for n = 1:100
    
    %wavelet transform
    [A1,H1,V1,D1] = dwt2(im_sp,'haar'); %take wavelet transform w/ haar filter, h,v,d are detail matrices, a is coarsest

    C = [A1 H1 V1 D1];
    wav_dim = size(A1,1);
    thresh = abs(0.05*max(C,[],'all'));

    for i = 1:size(C,1)*size(C,2)
        if abs(C(i))<thresh
            C(i) = 0;
        else
            C(i) = C(i) - thresh*exp(1j*angle(C(i))); %soft thresholding, subtract threshold val from all other pixels
        end

    end
    A2 = C(1:wav_dim,1:wav_dim);
    H2 = C(1:wav_dim,wav_dim+1:2*wav_dim);
    V2 = C(1:wav_dim,2*wav_dim+1:3*wav_dim);
    D2 = C(1:wav_dim,3*wav_dim+1:4*wav_dim);


    im_sp_th = idwt2(A2,H2,V2,D2,'haar'); %reconstructed image after thresholding

    %go to k space and downsample
    F_sp_th = fftshift(fft2(im_sp_th)*ft_weight);
    F_sp_th_masked = F_sp_th.*mask;


    %find err in k space and ifft to get difference image (compare to
    %original)
    F_err = F_sp_th_masked - F_imdata_sp; %Ax-y error between sampled original and wavelet recon in k space
    delta_im = ifft2(ifftshift(F_err))/ft_weight;

    %add diff im to original in image space
    new_im = im_sp + delta_im;
    im_sp = new_im./abs(max(new_im, [],'all'));
    im_final = im_final + delta_im;
    im_final = im_final./abs(max(im_final,[],'all'));

end

figure();
imshow(abs(im_sp));

figure();
